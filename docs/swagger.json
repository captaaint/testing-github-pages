{
  "openapi": "3.0.1",
  "info": {
    "title": "CRM Engine Client api",
    "description": "This is the description of the Client api. Needs to be specified later.",
    "termsOfService": "https://example.com/terms",
    "contact": {
      "name": "Example Contact",
      "url": "https://example.com/contact"
    },
    "license": {
      "name": "Example License",
      "url": "https://example.com/license"
    },
    "version": "v1"
  },
  "paths": {
    "/api/appsettings": {
      "get": {
        "tags": [
          "AppSettings"
        ],
        "summary": "Gets all application settings",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppSettingRaw"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppSettingRaw"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppSettingRaw"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "AppSettings"
        ],
        "summary": "Saves the specified application setting",
        "requestBody": {
          "description": "The app settings to save",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AppSettingRaw"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppSettingRaw"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AppSettingRaw"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AppSettingRaw"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/appsettings/{key}": {
      "get": {
        "tags": [
          "AppSettings"
        ],
        "summary": "Gets the app setting with the specified key",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Setting key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AppSettingRaw"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppSettingRaw"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppSettingRaw"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AppSettings"
        ],
        "summary": "Removes the specified application setting",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Application setting key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/auth/me": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Issues a token for valid credentials",
        "requestBody": {
          "description": "Authorization data, email and password",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationData"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationData"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationData"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenHolder"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenHolder"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenHolder"
                }
              }
            }
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Tries to get authentication using token",
        "requestBody": {
          "description": "Authorization data, login and password",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationData"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationData"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationData"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenHolder"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenHolder"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenHolder"
                }
              }
            }
          }
        }
      }
    },
    "/api/dataconnector/exec/{operationId}": {
      "post": {
        "tags": [
          "DataConnector"
        ],
        "summary": "Executes a named data operation",
        "parameters": [
          {
            "name": "operationId",
            "in": "path",
            "description": "Unique ID of the data operation",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Arguments to pass to the operation",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/JToken"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/JToken"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/JToken"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/JToken"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/entitypersistence/{entityLikeId}/{recordId}/{getDeleted}": {
      "get": {
        "tags": [
          "EntityPersistence"
        ],
        "summary": "Reads the entity instance according to its type and instance ID",
        "description": "This endpoint returns a single entity-like (entity or projection) record according to its type ID (the type of\r\nentity/projection) and instance ID (unique identifier of the particular entity-like record). Within the\r\n*`getDeleted`* parameter, you can define the way this method handles the deleted records:\r\n\r\n> *Note*: Deleted records remain in the database marked with a flag indicating their deleted state.\r\n- `none`: Ignores deleted records\r\n- `deletedonly`: Retrieves only deleted records\r\n- `all`: Retrieves both existing and deleted records\r\n\r\nSample requests:\r\n            \r\nReads the `account` entity's instance with ID 120, provided that the record is not deleted:\r\n\r\n```\r\nGET /api/entitypersistence/account/120\r\n```\r\nReads the `contact` entity's instance with ID 34, provided that the record has already been deleted:\r\n```\r\nGET /api/entitypersistence/contact/34/deletedonly\r\n```\r\n            \r\nReads the `keyaccount` projection's instance with ID 521 independently whether that record is active or already\r\ndeleted:\r\n            \r\n```\r\nGET /api/entitypersistence/keyaccount/521/all\r\n```\r\nThe retrieved record data has a field, `$deleted`, which indicates if the record is deleted. If `$deleted` is\r\nmissing from the response, or its value is `false`, the record is still active.\r\n            \r\n```json\r\n{\r\n    \"$type\": \"account\",\r\n    \"$id\": 120,\r\n    \"$createdts\": \"2022-06-21T10:00:41.885\",\r\n    \"$deletedts\": \"2022-06-21T12:10:27.473\",\r\n    \"$deleted\": true,\r\n    \"$createdby\": 0,\r\n    \"name\": \"Apricot Oracle\",\r\n    \"industry\": \"Drugs\",\r\n    \"website\": null,\r\n    \"established\": null,\r\n    \"tickersymbol\": null\r\n}\r\n```",
        "parameters": [
          {
            "name": "entityLikeId",
            "in": "path",
            "description": "The type ID of the entity-like object",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "account"
          },
          {
            "name": "recordId",
            "in": "path",
            "description": "The instance ID to read",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 120
          },
          {
            "name": "getDeleted",
            "in": "path",
            "description": "Indicates how deleted instances should be read",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "none"
          }
        ],
        "responses": {
          "200": {
            "description": "The entity data found with the specified type ID and instance ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentResult"
                }
              }
            }
          },
          "404": {
            "description": "The specified entity instance cannot be found (it might have been deleted)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/entitypersistence": {
      "post": {
        "tags": [
          "EntityPersistence"
        ],
        "summary": "Inserts a new entity to the database",
        "description": "This endpoint inserts a new entity into the database.\r\n            \r\n> *Note*: Projections are read-only concepts based on entities. You cannot insert a projection instance.\r\n            \r\nThe information in the request body must be valid and match the structure of the entity to insert:\r\n- The `$type` field must be a valid entity ID; the method carries out the data validation according to the\r\nmetadata of that particular entity. If `$type` is missing or invalid, the method raises an\r\n`EntityNotRegisteredException` (400, Bad Request).\r\n- The `$id` field must have a value of 0. This value indicates that the caller intends to insert a new record\r\n(and not update an existing one). With non-zero `$id`, the method raises an `EntityInvalidIdException`\r\n(400, BadRequest).\r\n            \r\nThe method returns the identifier of the newly inserted entity record.\r\n            \r\nSample request body:\r\n            \r\n```json\r\n{\r\n    \"$type\": \"account\",\r\n    \"$id\": 0,\r\n    \"name\": \"Buckoustics Phoenixpaw\",\r\n    \"industry\": \"Telecom\",\r\n    \"established\": 1904\r\n}\r\n```",
        "requestBody": {
          "description": "Entity data to save",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/JToken"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The new entity is saved in the database. The response body contains the ID of the newly inserted record.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentResult"
                }
              }
            }
          },
          "400": {
            "description": "The entity data sent in the request body was not valid for a successful insert operation. The response body\r\nshows the issue details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "EntityPersistence"
        ],
        "summary": "Updates an entity in the database",
        "description": "This endpoint updates an existing entity instance in the database.\r\n            \r\nThe information in the request body must be valid and match the entity's structure to update.\r\n- The `$type` field must be a valid entity ID; the method carries out the data validation according to the\r\nmetadata of that particular entity. If `$type` is missing or invalid, the method raises an\r\n`EntityNotRegisteredException` (400, Bad Request).\r\n- The `$id` field must have a positive value. This value indicates that the caller intends to update an\r\nexisting record (and not insert a new one). With non-positive `$id`, the method raises an\r\n`EntityInvalidIdException` (400, Bad Request).\r\n            \r\nThe update operation works with this semantics:\r\n- If the corresponding record is not in the database, the method raises an `EntityRecordNotFoundException`\r\n(400, Bad Request).\r\n- If the `$modifiedts` property is empty (`null`), the method checks that the corresponding record in the\r\ndatabase has the `$modifiedts` property set to `null`. Otherwise, the method raises an\r\n`EntityConcurrencyException`.\r\n- If the `$modifiedts` property is non-empty and less than the one stored in the database, the method raises an\r\n`EntityConcurrencyException`.\r\n            \r\nThe method returns a boolean value indicating if any of the record's attributes have been changed (`true`), or\r\nif all attributes match the previous ones (`false`).\r\n            \r\n> *Note*: The current implementation does not check the record attribute changes; it always returns true.",
        "requestBody": {
          "description": "Entity data to save",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/JToken"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The response body contains the flag indicating if any modifications have been saved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentResult"
                }
              }
            }
          },
          "400": {
            "description": "The entity data sent in the request body was not valid for a successful update operation. The response body\r\nshows the issue details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/entitypersistence/{entityId}/{recordId}": {
      "delete": {
        "tags": [
          "EntityPersistence"
        ],
        "summary": "Deletes the entity from the database",
        "description": "This endpoint removes an entity record from the database.\r\n            \r\n> *Note*: The system does not delete the entity record; it sets its `deleted` field to `true`, indicating a\r\nlogical delete. With the data query endpoints, you can also retrieve deleted records.\r\n            \r\nIf the entity with the specified type (`entityId`) does not exist, the method raises an\r\n`EntityNotRegisteredException` (400, Bad Request).\r\n            \r\nThe method returns a boolean value. True indicates that the record has just been deleted. False shows that the\r\nrecord does not exist in the database or has already been deleted.\r\n            \r\nSample request to delete the `account` entity's instance with ID 42:\r\n            \r\n```\r\nDELETE /api/entitypersistence/account/42\r\n```",
        "parameters": [
          {
            "name": "entityId",
            "in": "path",
            "description": "The type ID of the entity",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "account"
          },
          {
            "name": "recordId",
            "in": "path",
            "description": "The instance ID of the entity to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 100
          }
        ],
        "responses": {
          "200": {
            "description": "The response body contains the flag indicating if the record has just been deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentResult"
                }
              }
            }
          },
          "400": {
            "description": "The entity type in the `entityId` parameter is not registered in the system."
          }
        }
      }
    },
    "/api/entitypersistence/longtext/{entityId}/{recordId}/{fieldName}": {
      "get": {
        "tags": [
          "EntityPersistence"
        ],
        "summary": "Reads the value of a long text field",
        "description": "(**Not implemented yet**)\r\n            \r\nThis endpoint reads a field of type `LongText` from the database.\r\n            \r\n> *Note*: `LongText` fields are not returned from the database when you query an entity or projection record,\r\nas they may be even 65.535 characters long and might cause a high unnecessary network load. You must query such\r\nfield values out of the band through this endpoint.",
        "parameters": [
          {
            "name": "entityId",
            "in": "path",
            "description": "The type ID of the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recordId",
            "in": "path",
            "description": "The instance ID of the entity to read",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "fieldName",
            "in": "path",
            "description": "The name of the field with long text value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "EntityPersistence"
        ],
        "summary": "Saves the value of a long text field",
        "description": "(**Not implemented yet**)\r\n            \r\nThis endpoint updates a `LongText` field of an entity instance already inserted into the database.",
        "parameters": [
          {
            "name": "entityId",
            "in": "path",
            "description": "The type ID of the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recordId",
            "in": "path",
            "description": "The instance ID of the entity to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "fieldName",
            "in": "path",
            "description": "The name of the field with long text value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Long text data to save",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/entitypersistence/blob/{entityId}/{recordId}/{fieldName}": {
      "get": {
        "tags": [
          "EntityPersistence"
        ],
        "summary": "Reads the value of a blob (image, document) field",
        "description": "(**Not implemented yet**)\r\n            \r\nThis endpoint reads a field of `Image` or `Document` from the database.\r\n            \r\n> *Note*: `Image` and `Document` fields are not returned from the database when you query an entity or\r\nprojection record, as they may be even 2GB in size and might cause a high unnecessary network load. You must\r\nquery such field values out of the band.",
        "parameters": [
          {
            "name": "entityId",
            "in": "path",
            "description": "The type ID of the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recordId",
            "in": "path",
            "description": "The instance ID of the entity to read",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "fieldName",
            "in": "path",
            "description": "The name of the field with blob value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "EntityPersistence"
        ],
        "summary": "Saves the value of a blob (image, document) field",
        "description": "(**Not implemented yet**)\r\n            \r\nThis method updates a blob (`Image`, `Document`) field of an entity instance already inserted into the database.",
        "parameters": [
          {
            "name": "entityId",
            "in": "path",
            "description": "The type ID of the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recordId",
            "in": "path",
            "description": "The instance ID of the entity to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "fieldName",
            "in": "path",
            "description": "The name of the field with blob value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Blob data to save (Base64-encoded string)",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/entitypersistence/query/{entityLikeId}/{querySpecification}": {
      "get": {
        "tags": [
          "EntityPersistence"
        ],
        "summary": "Gets the entity/projection records matching with a query specification",
        "description": "This endpoint queries an entity (or projection) and returns a list of matching entity or projection instances.\r\n            \r\nThe `entityLikeId` parameter specifies the unique identifier of an entity or a projection to read. Should the\r\ncaller provide an invalid `entityLikeId`, the method would raise an `EntityNotRegisteredException` (400, Bad\r\nrequest). `querySpecification` describes the parameters of the query to execute. The method returns all\r\nnon-deleted records of a particular entity or projection type if the query specification is empty.\r\n            \r\nThe method returns a list of matching entity/projection records. If there are no matches, it returns an empty\r\nlist.\r\n            \r\n### Query specification\r\n            \r\n```json\r\n{\r\n  \"queryClause\": \"::query clause definition object::\",\r\n  \"textFilter\": \"::text filter specification::\",\r\n  \"order\": [ \"::order specification clause::\" ],\r\n  \"limit\": \"::(number) maximum number of records to retrieve::\",\r\n  \"getDeleted\": \"'none'|'deletedOnly'|'all'\"\r\n}\r\n```\r\n            \r\n### Query clauses\r\n            \r\nThe `queryClause` property allows you to build composite queries by combining simple clauses\r\n            \r\n**Field condition:**\r\n```json\r\n{\r\n  \"queryClause\": {\r\n    \"type\": \"condition\",\r\n    \"field\": \"::name of an entity/projection field::\",\r\n    \"condition\": \"'='|'!='|'<'|'<='|'>'|'>='|'like'\",\r\n    \"value\": \"::(number|string|boolean) field value::\"\r\n  }\r\n}\r\n```\r\n            \r\nExample:\r\n            \r\n```json\r\n{\r\n  \"queryClause\": {\r\n    \"type\": \"condition\",\r\n    \"field\": \"firstname\",\r\n    \"condition\": \"like\",\r\n    \"value\": \"%tom%\"\r\n  }\r\n}\r\n```\r\n            \r\n**Not condition**\r\n            \r\n```json\r\n{\r\n  \"queryClause\": {\r\n    \"type\": \"not\",\r\n    \"operand\": \"::query clause object::\"\r\n  }\r\n}\r\n```\r\n            \r\nExample:\r\n            \r\n```json\r\n{\r\n  \"queryClause\": {\r\n    \"type\": \"not\",\r\n    \"operand\": {\r\n      \"type\": \"condition\",\r\n      \"field\": \"firstname\",\r\n      \"condition\": \"like\",\r\n      \"value\": \"%tom%\"\r\n    }\r\n  }\r\n}\r\n```\r\n            \r\n**IS NULL condition**\r\n            \r\n```json\r\n{\r\n  \"queryClause\": {\r\n    \"type\": \"isnull\",\r\n    \"field\": \"::name of an entity/projection field::\"\r\n  }\r\n}\r\n```\r\n            \r\nExample:\r\n            \r\n```json\r\n{\r\n  \"queryClause\": {\r\n    \"type\": \"isnull\",\r\n    \"field\": \"website\"\r\n  }\r\n}\r\n```\r\n            \r\n**IS NOT NULL condition**\r\n            \r\n```json\r\n{\r\n  \"queryClause\": {\r\n    \"type\": \"isnotnull\",\r\n    \"field\": \"::name of an entity/projection field::\"\r\n  }\r\n}\r\n```\r\n            \r\nExample:\r\n            \r\n```json\r\n{\r\n  \"queryClause\": {\r\n    \"type\": \"isnotnull\",\r\n    \"field\": \"lastname\"\r\n  }\r\n}\r\n```\r\n            \r\n**Composite conditions (AND, OR, XOR)**\r\n```json\r\n{\r\n  \"queryClause\": {\r\n    \"type\": \"'and'|'or'|'xor'\",\r\n    \"clauses\": [ \"::list of clauses to combine::\" ]\r\n  }\r\n}\r\n```\r\nExample:\r\n            \r\n```json\r\n{\r\n  \"queryClause\": {\r\n    \"type\": \"and\",\r\n    \"clauses\": [\r\n      {\r\n        \"type\": \"condition\",\r\n        \"field\": \"firstname\",\r\n        \"condition\": \"=\",\r\n        \"value\": \"Tom\"\r\n      },\r\n      {\r\n        \"type\": \"or\",\r\n        \"clauses\": [\r\n          {\r\n            \"type\": \"isnull\",\r\n            \"field\": \"industry\"\r\n          },\r\n          {\r\n            \"type\": \"condition\",\r\n            \"field\": \"industry\",\r\n            \"condition\": \"like\",\r\n            \"value\": \"%ment%\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n            \r\n### Text filtering\r\n            \r\nYou can easily filter for text fragments by listing entity fields and the text segment to search for.\r\n            \r\n```json\r\n{\r\n  \"textFilter\": {\r\n    \"fields\": [ \"::array of fields to use in the search::\" ],\r\n    \"value\": \"::text fragment to search for::\"\r\n  }\r\n}\r\n```\r\n            \r\nThe `fields` property is optional. If you omit it, the query will use the fields defined in the entity\r\nmetadata's `textFilters` property.\r\n            \r\nExample:\r\n```json\r\n{\r\n  \"textFilter\": {\r\n    \"fields\": [ \"firstname\", \"lastname\" ],\r\n    \"value\": \"rob\"\r\n  }\r\n}\r\n```\r\n### Order specification\r\n            \r\nYou can define one or more order specifications to sort the result accordingly.\r\n```json\r\n{\r\n  \"order\": [\r\n    {\r\n      \"field\": \"::first field\",\r\n      \"descending\": \"::should use descending order?::\"\r\n    },\r\n    {\r\n      \"field\": \"::next field\",\r\n      \"descending\": \"::should use descending order?::\"\r\n    }\r\n  ]\r\n}\r\n```\r\n            \r\n> *Note*: You can omit the `descending` property; its default value is `false`.\r\n            \r\nExample:\r\n            \r\n```json\r\n{\r\n  \"order\": [\r\n    {\r\n      \"field\": \"lastname\"\r\n    },\r\n    {\r\n      \"field\": \"createdts\",\r\n      \"descending\": true\r\n    }\r\n  ]\r\n}\r\n```\r\n            \r\n### Limiting record number\r\n            \r\nYou can limit the number of records the query retrieves.\r\n            \r\nExample:\r\n            \r\n```json\r\n{\r\n  \"limit\": 100\r\n}\r\n```\r\n\r\n### Handling deleted records\r\n\r\n- `none`: Ignores deleted records\r\n- `deletedonly`: Retrieves only deleted records\r\n- `all`: Retrieves both existing and deleted records",
        "parameters": [
          {
            "name": "entityLikeId",
            "in": "path",
            "description": "The type ID of the entity-like object to query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "account"
          },
          {
            "name": "querySpecification",
            "in": "path",
            "description": "Specification of the query (in JSON)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The entity query was successful, and the response body contains the matching records.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentResult"
                }
              }
            }
          },
          "404": {
            "description": "The specified entity/projection type is not registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/entitypersistence/associated/{associationId}/{recordId}/{getDeleted}/{projectionId}": {
      "get": {
        "tags": [
          "EntityPersistence"
        ],
        "summary": "Queries the list of entity/projection instances linked with the specified association type and record ID",
        "description": "This endpoint queries the child entity instances linked to a parent entity instance.\r\n            \r\n- The `associationId` parameter specifies the identifier of the association defining the relation between the\r\nparent and child entities. You can use either the `uid` (from parent to child) or the `reverseId` property\r\n(from child to parent) navigation.\r\n- The `recordId` parameter identifies the entity record from which the navigation starts.\r\n- The `getDeleted` parameter's value indicates how to handle deleted records on both sides of the association:\r\n  - `none`: Ignores deleted records\r\n  - `deletedonly`: Retrieves only deleted records\r\n  - `all`: Retrieves both existing and deleted records\r\n- Instead of retrieving child records, you can declare a projection based on the entity type of the\r\nassociation's child-side (with `projectionId`). The query infers the entity type from the association's\r\nmetadata if this parameter is not defined.\r\n            \r\nThe endpoint returns a list of matching entity/projection records. If there are no matches, it returns an empty\r\nlist.\r\n            \r\nExamples:\r\n            \r\nObtain the contacts according to the `contactsofaccount` association using the account with record ID 123:\r\n            \r\n```\r\nGET /api/entitypersistence/associated/contactsofaccount/123\r\n```\r\n            \r\nObtain the contacts according to the `contactsofaccount` association using the account with record ID 123.\r\nRender the associated contact records using the `contactcard` projection:\r\n            \r\n```\r\nGET /api/entitypersistence/associated/contactsofaccount/123/contactcard\r\n```",
        "parameters": [
          {
            "name": "associationId",
            "in": "path",
            "description": "ID of the association to use to query associated entities",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "contactofaccount"
          },
          {
            "name": "recordId",
            "in": "path",
            "description": "ID of the root record",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 100
          },
          {
            "name": "getDeleted",
            "in": "path",
            "description": "Indicates if deleted records should be read",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "none"
          },
          {
            "name": "projectionId",
            "in": "path",
            "description": "Optional entity/projection ID of associated entities",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The entity query was successful, and the response body contains the matching records.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentResult"
                }
              }
            }
          },
          "404": {
            "description": "The specified association/entity/projection type is not registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/entitypersistence/associatedids/{associationId}/{recordId}/{getDeleted}": {
      "get": {
        "tags": [
          "EntityPersistence"
        ],
        "summary": "Query the list of entity instance IDs linked with the specified association type and record ID",
        "description": "This endpoint queries the list of child entity instance IDs linked to a parent entity instance.\r\n            \r\n- The `associationId` parameter specifies the identifier of the association defining the relation between the\r\nparent and child entities. You can use the `uid` (from parent to child) or the `reverseId` property (from child\r\nto parent) navigation.\r\n- The `recordId` parameter identifies the entity record from which the navigation starts.\r\n- The `getDeleted` parameter's value indicates how to handle deleted records on both sides of the association:\r\n  - `none`: Ignores deleted records\r\n  - `deletedonly`: Retrieves only deleted records\r\n  - `all`: Retrieves both existing and deleted records\r\nThe endpoint returns a list of matching entity instance IDs. If there are no matches, it returns an empty list.\r\n            \r\nExamples:\r\n            \r\nObtain the contacts according to the `contactsofaccount` association using the account with record ID 123:\r\n            \r\n```\r\nGET /api/entitypersistence/associatedids/contactsofaccount/123\r\n```",
        "parameters": [
          {
            "name": "associationId",
            "in": "path",
            "description": "ID of the association to use to query associated entities",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "contactofaccount"
          },
          {
            "name": "recordId",
            "in": "path",
            "description": "ID of the root record",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 100
          },
          {
            "name": "getDeleted",
            "in": "path",
            "description": "Indicates if deleted records should be read",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "none"
          }
        ],
        "responses": {
          "200": {
            "description": "The entity query was successful, and the response body contains the matching IDs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentResult"
                }
              }
            }
          },
          "404": {
            "description": "The specified association/entity type is not registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/entitypersistence/unassociated/{associationId}/{recordId}/{getDeleted}/{projectionId}": {
      "get": {
        "tags": [
          "EntityPersistence"
        ],
        "summary": "Query the list of entity/projection instances unlinked with the specified association type and record ID",
        "description": "This endpoint queries the child entity instances *not* linked to a parent entity instance.\r\n- The `associationId` parameter specifies the identifier of the association defining the relation between the\r\nparent and child entities. You can use either the `uid` (from parent to child) or the `reverseId` property\r\n(from child to parent) navigation.\r\n- The `recordId` parameter identifies the entity record from which the navigation starts.\r\n- The `getDeleted` parameter's value indicates how to handle deleted records on both sides of the association:\r\n  - `none`: Ignores deleted records\r\n  - `deletedonly`: Retrieves only deleted records\r\n  - `all`: Retrieves both existing and deleted records\r\n- Instead of retrieving child records, you can declare a projection based on the entity type of the\r\nassociation's child-side (with `projectionId`). The query infers the entity type from the association's\r\nmetadata if this parameter is not defined.\r\n            \r\nThe endpoint returns a list of matching entity/projection records. If there are no matches, it returns an empty\r\nlist.\r\n            \r\nExamples:\r\n            \r\nObtain the unlinked contacts according to the `contactsofaccount` association using the account with record\r\nID 123:\r\n            \r\n```\r\nGET /api/entitypersistence/unassociated/contactsofaccount/123\r\n```\r\n            \r\nObtain the unlinked contacts according to the `contactsofaccount` association using the account with record\r\nID 123. Render the associated contact records using the `contactcard` projection:\r\n            \r\n```\r\nGET /api/entitypersistence/unassociated/contactsofaccount/123/contactcard\r\n```",
        "parameters": [
          {
            "name": "associationId",
            "in": "path",
            "description": "ID of the association to use to query unassociated entities",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "contactofaccount"
          },
          {
            "name": "recordId",
            "in": "path",
            "description": "ID of the root record",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 100
          },
          {
            "name": "getDeleted",
            "in": "path",
            "description": "Indicates if deleted records should be read",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "none"
          },
          {
            "name": "projectionId",
            "in": "path",
            "description": "Optional entity/projection ID of associated entities",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The entity query was successful, and the response body contains the matching records.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentResult"
                }
              }
            }
          },
          "404": {
            "description": "The specified association/entity/projection type is not registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/entitypersistence/unassociatedids/{associationId}/{recordId}/{getDeleted}": {
      "get": {
        "tags": [
          "EntityPersistence"
        ],
        "summary": "Query the list of entity instance IDs unlinked with the specified association type and record ID",
        "description": "This endpoint queries the list of child entity instance IDs *not* linked to a parent entity instance.\r\n            \r\n- The `associationId` parameter specifies the identifier of the association defining the relation between the\r\nparent and child entities. You can use the `uid` (from parent to child) or the `reverseId` property (from child\r\nto parent) navigation.\r\n- The `recordId` parameter identifies the entity record from which the navigation starts.\r\n- The `getDeleted` parameter's value indicates how to handle deleted records on both sides of the association:\r\n  - `none`: Ignores deleted records\r\n  - `deletedonly`: Retrieves only deleted records\r\n  - `all`: Retrieves both existing and deleted records\r\nThe endpoint returns a list of matching entity instance IDs. If there are no matches, it returns an empty list.\r\n            \r\nExamples:\r\n            \r\nObtain the unlinked contacts according to the `contactsofaccount` association using the account with record\r\nID 123:\r\n            \r\n```\r\nGET /api/entitypersistence/unassociatedids/contactsofaccount/123\r\n```",
        "parameters": [
          {
            "name": "associationId",
            "in": "path",
            "description": "ID of the association to use to query unassociated entities",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "contactofaccount"
          },
          {
            "name": "recordId",
            "in": "path",
            "description": "ID of the root record",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 100
          },
          {
            "name": "getDeleted",
            "in": "path",
            "description": "Indicates if deleted records should be read",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "none"
          }
        ],
        "responses": {
          "200": {
            "description": "The entity query was successful, and the response body contains the matching IDs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentResult"
                }
              }
            }
          },
          "404": {
            "description": "The specified association/entity type is not registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/entitypersistence/link/{associationId}/{leftRecordId}/{rightRecordId}": {
      "put": {
        "tags": [
          "EntityPersistence"
        ],
        "summary": "Links two entity instances",
        "description": "This endpoint links two entity instances according to the specified association type.\r\n            \r\n- `associationId`: The `uid` of the association to create the link. (The association determines the type of\r\nentities on the particular association's left and right sides.)\r\n- `leftRecordId`: The entity instance ID on the left side.\r\n- `rightRecordId`: The entity instance ID on the right side.\r\n            \r\nThe endpoint returns a Boolean value that indicates if the link has been created. It retrieves `true`, if the\r\ncall created the link; returns `false`, if the link already exists.\r\n            \r\nThis endpoint checks the association's type to avoid the violation of association constraints. For one-to-one\r\nand one-to-many associations, this method raises an `EntityOperationException` (400, Bad Request) if creating\r\nthe link would violate any of these \"one\" sides.\r\n            \r\nExample:\r\n            \r\nLink a contact with id 123 to its account record with ID 42:\r\n            \r\n```\r\nGET /api/entitypersistence/link/contactsofaccount/42/123\r\n```",
        "parameters": [
          {
            "name": "associationId",
            "in": "path",
            "description": "ID of the linking association",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "leftRecordId",
            "in": "path",
            "description": "ID of the left-side entity instance",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "rightRecordId",
            "in": "path",
            "description": "ID of the right-side entity instance",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation was successful, there is a link between the specified records.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentResult"
                }
              }
            }
          },
          "404": {
            "description": "The specified association type is not registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The operation violates the association constraints",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/entitypersistence/unlink/{associationId}/{leftRecordId}/{rightRecordId}": {
      "put": {
        "tags": [
          "EntityPersistence"
        ],
        "summary": "Unlinks two entity instances",
        "description": "This endpoint unlinks two entity instances according to the specified association type.\r\n            \r\n- `associationId`: The `uid` of the association to remove the link. (The association determines the type of\r\nentities on the particular association's left and right sides.)\r\n- `leftRecordId`: The entity instance ID on the left side.\r\n- `rightRecordId`: The entity instance ID on the right side.\r\n            \r\nThe endpoint returns a Boolean value that indicates if the link has been removed. It retrieves `true`, if the\r\ncall removed the link; otherwise, it returns `false`.\r\n            \r\nExample:\r\n            \r\nUnlink a contact with id 123 from its account record with ID 42:\r\n            \r\n```\r\nGET /api/entitypersistence/unlink/contactsofaccount/42/123\r\n```",
        "parameters": [
          {
            "name": "associationId",
            "in": "path",
            "description": "ID of the linking association",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "leftRecordId",
            "in": "path",
            "description": "ID of the left-side entity instance",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "rightRecordId",
            "in": "path",
            "description": "ID of the right-side entity instance",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation was successful, there is a no link between the specified records.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentResult"
                }
              }
            }
          },
          "404": {
            "description": "The specified association type is not registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/entitypersistence/executedslvalidator": {
      "put": {
        "tags": [
          "EntityPersistence"
        ],
        "summary": "Executes the DSL validators on the specified entity data",
        "description": "This endpoint executes the DSL validators on the specified entity data.\r\n- First, it executes field validators, following the field and then the validator declaration order; it ignores\r\nfields with no values.\r\n- Second, provided all required fields have values, runs the entity validators in their declaration order.\r\n            \r\nThe response body contains the result of the validation, as described with the `EntityValidationResult` type:\r\n            \r\n```typescript\r\ntype EntityValidationResult = {\r\n  // Validation results of the entity. The record key is the index of the entity validator. The value is the\r\n  // result of running the particular entity validator.\r\n  entityValidation?: Record<number, ValidationResultData>;\r\n            \r\n  // Validation result of the entity fields. The record key is the field's name, and the value is a hash object\r\n  // that results from running the field validators.\r\n  fieldValidation?: Record<string, Record<number, ValidationResultData>>;\r\n};\r\n            \r\ntype ValidationResultData = {\r\n  // Indicates if the validation was successful\r\n  valid: boolean;\r\n            \r\n  // Indicates if there was an error during the evaluation of validation expression\r\n  evaluationError: boolean;\r\n            \r\n  // The error message of the validation\r\n  errorMessage?: string;\r\n};\r\n```",
        "requestBody": {
          "description": "Entity data to validate",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/JToken"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The validation has been carried out, the response body contains its result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentResult"
                }
              }
            }
          },
          "404": {
            "description": "The specified entity type is not registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/entitypersistence/executebatch": {
      "post": {
        "tags": [
          "EntityPersistence"
        ],
        "summary": "Executes a batch of data modification operations within a single transaction",
        "description": "This endpoint executes a batch of data modifications enclosed in a single transaction. The modifications either\r\nrun entirely or, in case of any error, the data remains unchanged.\r\n            \r\nThe request body is expected to be an array of `BatchOperation` instances:\r\n            \r\n```typescript\r\n// Represents the available batch operations\r\nexport type BatchOperation =\r\n  | InsertBatchOperation\r\n  | UpdateBatchOperation\r\n  | DeleteBatchOperation\r\n  | LinkOrUnlinkBatchOperation;\r\n            \r\n// Represents an INSERT operation in a batch\r\nexport interface InsertBatchOperation {\r\n  type: \"insert\";\r\n\r\n  // Data to insert\r\n  data: EntityData;\r\n            \r\n  // The newly inserted record's ID can be accessed with this name in subsequent operations\r\n  id: string;\r\n}\r\n            \r\n// Represents an UPDATE operation in a batch\r\nexport type UpdateBatchOperation = {\r\n  type: \"update\";\r\n            \r\n  // Data to update\r\n  data: EntityData;\r\n            \r\n  // Optional reference to a previous INSERT operation's `id` property. The value of that identifier is used as\r\n  // the ID of the record to update.\r\n  recordIdRef?: string;\r\n            \r\n  // Indicates that no updated row should be considered an error\r\n  errorOnNoChange?: boolean;\r\n}\r\n            \r\n// Represents a DELETE operation in a batch\r\nexport type DeleteBatchOperation = {\r\n  type: \"delete\";\r\n            \r\n  // The type of entity to delete an instance from\r\n  entityId: string;\r\n            \r\n  // The optional ID of the entity instance to delete\r\n  recordId?: number;\r\n            \r\n  // Optional reference to a previous INSERT operation's `id` property. The value of that identifier is used as\r\n  // the ID of the record to delete.\r\n  recordIdRef?: string\r\n            \r\n  // Indicates that no deleted row should be considered an error\r\n  errorOnNoChange?: boolean;\r\n}\r\n            \r\n// Represents a LINK/UNLINK operation in a batch\r\nexport type LinkOrUnlinkBatchOperation = {\r\n  type: \"link\" | \"unlink\";\r\n            \r\n  // ID of the linking association\r\n  associationId: string;\r\n            \r\n  // ID of the left-side record\r\n  leftRecordId?: number;\r\n            \r\n  // Optional reference to a previous INSERT operation's `id` property. The value of that identifier is used as\r\n  // the ID of the left-side record.\r\n  leftRecordIdRef?: string;\r\n            \r\n  // ID of the right-side record\r\n  rightRecordId?: number;\r\n            \r\n  // Optional reference to a previous INSERT operation's `id` property. The value of that identifier is used as\r\n  the ID of the right-side record.\r\n  rightRecordIdRef?: string;\r\n            \r\n  // Indicates that no link/unlink should be considered an error\r\n  errorOnNoChange?: boolean;\r\n}\r\n```\r\n            \r\nBecause the INSERT operation generates the id of a newly created record, subsequent modification operations\r\ncannot directly use a concrete identifier. However, instead of a concrete ID, operations may refer to a\r\nparticular INSERT operation's newly generated ID using the reference string in the INSERT operation's `id`\r\nproperty.\r\n            \r\nThe result of the operation is a hash object, where the key is the `id` property of executed INSERT operations,\r\nand their value is the identifier generated by that particular INSERT.\r\n            \r\nExample:\r\n            \r\nThis batch inserts a new account, a new contact, and then links them:\r\n            \r\n```json\r\n[\r\n  {\r\n    \"type\": \"insert\",\r\n    \"data\": {\r\n      \"$type\": \"account\",\r\n      \"name\": \"SuperGlue\",\r\n      \"industry\": \"Telco\"\r\n    },\r\n    \"id\": \"insLeft\"\r\n  },\r\n  {\r\n    \"type\": \"insert\",\r\n    \"data\": {\r\n      \"$type\": \"contact\",\r\n      \"firstname\": \"John\",\r\n      \"lastname\": \"Doe\"\r\n    },\r\n    \"id\": \"insRight\"\r\n  },\r\n  {\r\n    \"type\": \"link\",\r\n    \"associationId\": \"contactofaccount\",\r\n    \"leftRecordIdRef\": \"insLeft\",\r\n    \"rightRecordIdRef\": \"isnRight\"\r\n  }\r\n]\r\n```",
        "requestBody": {
          "description": "JSON representation of the batch operation description",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JToken"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The batch has successfully completed. The result contains the IDs generated by INSERT operations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/metadataquery/modules": {
      "get": {
        "tags": [
          "MetadataQuery"
        ],
        "summary": "Retrieves the keys of registered modules",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/metadataquery/modules/all": {
      "get": {
        "tags": [
          "MetadataQuery"
        ],
        "summary": "Gets the metadata of modules",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModuleMetadata"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModuleMetadata"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModuleMetadata"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/metadataquery/modules/manifests": {
      "get": {
        "tags": [
          "MetadataQuery"
        ],
        "summary": "Retrieves the manifests of registered modules",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModuleManifest"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModuleManifest"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModuleManifest"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/metadataquery/entities": {
      "get": {
        "tags": [
          "MetadataQuery"
        ],
        "summary": "Retrieves the keys of registered entities",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/metadataquery/entities/{key}": {
      "get": {
        "tags": [
          "MetadataQuery"
        ],
        "summary": "Gets the metadata of the specified entity",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Entity key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EntityMetadataLight"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityMetadataLight"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityMetadataLight"
                }
              }
            }
          }
        }
      }
    },
    "/api/metadataquery/associations": {
      "get": {
        "tags": [
          "MetadataQuery"
        ],
        "summary": "Retrieves the keys of registered associations",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/metadataquery/associations/{key}": {
      "get": {
        "tags": [
          "MetadataQuery"
        ],
        "summary": "Gets the metadata of the specified association",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Association key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationMetadataLight"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationMetadataLight"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationMetadataLight"
                }
              }
            }
          }
        }
      }
    },
    "/api/metadataquery/projections": {
      "get": {
        "tags": [
          "MetadataQuery"
        ],
        "summary": "Retrieves the keys of registered projections",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/metadataquery/projections/{key}": {
      "get": {
        "tags": [
          "MetadataQuery"
        ],
        "summary": "Gets the metadata of the specified projection",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Projection key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectionMetadataLight"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectionMetadataLight"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectionMetadataLight"
                }
              }
            }
          }
        }
      }
    },
    "/api/metadataquery/datasets": {
      "get": {
        "tags": [
          "MetadataQuery"
        ],
        "summary": "Gets the keys of registered data sets",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/metadataquery/datasets/{key}": {
      "get": {
        "tags": [
          "MetadataQuery"
        ],
        "summary": "Gets data set metadata from the registry",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Unique data set ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DataSetMetadata"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSetMetadata"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSetMetadata"
                }
              }
            }
          }
        }
      }
    },
    "/api/metadataquery/compoundfieldtypes": {
      "get": {
        "tags": [
          "MetadataQuery"
        ],
        "summary": "Retrieves the keys of registered compound field types",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/metadataquery/compoundfieldtypes/{key}": {
      "get": {
        "tags": [
          "MetadataQuery"
        ],
        "summary": "Gets the metadata of the specified compound field type",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Compound field type key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CompoundFieldTypeMetadata"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompoundFieldTypeMetadata"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompoundFieldTypeMetadata"
                }
              }
            }
          }
        }
      }
    },
    "/api/metadataquery/appdefinitions": {
      "get": {
        "tags": [
          "MetadataQuery"
        ],
        "summary": "Retrieves the keys of registered app definitions",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/metadataquery/appdefinitions/{key}": {
      "get": {
        "tags": [
          "MetadataQuery"
        ],
        "summary": "Gets the metadata of the specified app definition",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "App definition key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UiNode"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UiNode"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UiNode"
                }
              }
            }
          }
        }
      }
    },
    "/api/metadataquery/dataconnections": {
      "get": {
        "tags": [
          "MetadataQuery"
        ],
        "summary": "Gets the keys of registered data connections",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/metadataquery/dataconnections/{key}": {
      "get": {
        "tags": [
          "MetadataQuery"
        ],
        "summary": "Gets the data connection with the specified key",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Unique data connection ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DataConnection"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataConnection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataConnection"
                }
              }
            }
          }
        }
      }
    },
    "/api/metadataquery/dataoperations": {
      "get": {
        "tags": [
          "MetadataQuery"
        ],
        "summary": "Gets the keys of registered data operations",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/metadataquery/dataoperations/{key}": {
      "get": {
        "tags": [
          "MetadataQuery"
        ],
        "summary": "Gets the data operation with the specified key",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Unique data connection ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DataOperation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataOperation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataOperation"
                }
              }
            }
          }
        }
      }
    },
    "/api/metadataquery/fieldtypes": {
      "get": {
        "tags": [
          "MetadataQuery"
        ],
        "summary": "Gets the list of available entity field types",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FieldTypeDescriptor"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FieldTypeDescriptor"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FieldTypeDescriptor"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/module/register/{saveOnly}/{instantRefresh}": {
      "post": {
        "tags": [
          "Module"
        ],
        "summary": "Registers a module in the database",
        "parameters": [
          {
            "name": "saveOnly",
            "in": "path",
            "description": "True indicates that module data should be saved without upgrading the database structure",
            "required": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "instantRefresh",
            "in": "path",
            "description": "True, if the metadata registry should be instantly refrehed",
            "required": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "Module manifest with module metadata information",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/JToken"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/JToken"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/JToken"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/JToken"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/module/update": {
      "put": {
        "tags": [
          "Module"
        ],
        "summary": "Updates an existing module according to the change information provided",
        "requestBody": {
          "description": "Module manifest with updated entity information",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/JToken"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/JToken"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/JToken"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/JToken"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/module/{moduleId}": {
      "get": {
        "tags": [
          "Module"
        ],
        "summary": "Gets the information of the module with the specified ID",
        "parameters": [
          {
            "name": "moduleId",
            "in": "path",
            "description": "ID of the module to query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ModuleRaw"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModuleRaw"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModuleRaw"
                }
              }
            }
          }
        }
      }
    },
    "/api/module/all": {
      "get": {
        "tags": [
          "Module"
        ],
        "summary": "Gets the information of all modules cached in the database",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModuleRaw"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModuleRaw"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModuleRaw"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/module/lock/{moduleId}": {
      "put": {
        "tags": [
          "Module"
        ],
        "summary": "Locks the specified module",
        "parameters": [
          {
            "name": "moduleId",
            "in": "path",
            "description": "ID of the module to lock",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/module/unlock/{moduleId}": {
      "put": {
        "tags": [
          "Module"
        ],
        "summary": "Unlocks the specified module",
        "parameters": [
          {
            "name": "moduleId",
            "in": "path",
            "description": "ID of the module to unlock",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/module/edit/{moduleId}": {
      "put": {
        "tags": [
          "Module"
        ],
        "summary": "Signs that the specified module is about being edited",
        "parameters": [
          {
            "name": "moduleId",
            "in": "path",
            "description": "ID of the module",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/module/commit/{moduleId}": {
      "put": {
        "tags": [
          "Module"
        ],
        "summary": "Signs that the specified module been edited",
        "parameters": [
          {
            "name": "moduleId",
            "in": "path",
            "description": "ID of the module",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/module/unregister/{moduleId}": {
      "post": {
        "tags": [
          "Module"
        ],
        "summary": "Removes the registration of the specified module from the database",
        "parameters": [
          {
            "name": "moduleId",
            "in": "path",
            "description": "The ID of the module to unregister",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/module/export/{moduleId}/{filename}/{toModulesFolder}": {
      "post": {
        "tags": [
          "Module"
        ],
        "summary": "Exports the",
        "parameters": [
          {
            "name": "moduleId",
            "in": "path",
            "description": "The ID of the module to export",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the export file",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toModulesFolder",
            "in": "path",
            "description": "True, save the file into the module folder; false, save the file to the module export folder",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/permissions/{userId}": {
      "get": {
        "tags": [
          "PermissionQuery"
        ],
        "summary": "Gets the permissions for the specified user",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/permissions/route/{userId}": {
      "get": {
        "tags": [
          "PermissionQuery"
        ],
        "summary": "Gets the permission routes for a user to help analyzing why a \r\nuser has or lacks a particular permission",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PermissionRoute"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PermissionRoute"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PermissionRoute"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "tags": [
          "UserManagement"
        ],
        "summary": "Gets all active users from the database",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserRaw"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserRaw"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserRaw"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "UserManagement"
        ],
        "summary": "Adds a new User to the database",
        "requestBody": {
          "description": "New user information",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserCore"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCore"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCore"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserCore"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserRaw"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRaw"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRaw"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "UserManagement"
        ],
        "summary": "Updates the information of the specified user",
        "requestBody": {
          "description": "User information to update",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserCoreUpdate"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCoreUpdate"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCoreUpdate"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserCoreUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserRaw"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRaw"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRaw"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}": {
      "get": {
        "tags": [
          "UserManagement"
        ],
        "summary": "Gets the user with the specified ID",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user to retrieve",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserRaw"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRaw"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRaw"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/enable/{userId}": {
      "put": {
        "tags": [
          "UserManagement"
        ],
        "summary": "Enables the specified user",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user to enable",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/users/disable/{userId}": {
      "put": {
        "tags": [
          "UserManagement"
        ],
        "summary": "Disables the specified user",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user to disable",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/users/picture/{userId}": {
      "put": {
        "tags": [
          "UserManagement"
        ],
        "summary": "Sets the user picture",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Picture stream to save; or empty byte array to remove the picture",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "string",
                "format": "byte"
              }
            },
            "application/json": {
              "schema": {
                "type": "string",
                "format": "byte"
              }
            },
            "text/json": {
              "schema": {
                "type": "string",
                "format": "byte"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string",
                "format": "byte"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/users/archive/{userId}": {
      "put": {
        "tags": [
          "UserManagement"
        ],
        "summary": "Archives the specified user (considers as deleted)",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user to archive",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/users/revive/{userId}": {
      "put": {
        "tags": [
          "UserManagement"
        ],
        "summary": "Revives the specified user from its archived state",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user to archive",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/teams": {
      "get": {
        "tags": [
          "UserManagement"
        ],
        "summary": "Gets all teams",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamRaw"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamRaw"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamRaw"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "UserManagement"
        ],
        "summary": "Adds a new team to the database",
        "requestBody": {
          "description": "New team information",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TeamCore"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamCore"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamCore"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TeamCore"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TeamRaw"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamRaw"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamRaw"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "UserManagement"
        ],
        "summary": "Updates a team in the database",
        "requestBody": {
          "description": "Team information",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TeamCoreUpdate"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamCoreUpdate"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamCoreUpdate"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TeamCoreUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TeamRaw"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamRaw"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamRaw"
                }
              }
            }
          }
        }
      }
    },
    "/api/teams/{teamId}": {
      "get": {
        "tags": [
          "UserManagement"
        ],
        "summary": "Gets the specified team",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "ID of team to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TeamRaw"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamRaw"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamRaw"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "UserManagement"
        ],
        "summary": "Deletes the specified team",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "Team to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/teams/users/{teamId}": {
      "get": {
        "tags": [
          "UserManagement"
        ],
        "summary": "Gets the users in the specified team",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "ID of team to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserRaw"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserRaw"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserRaw"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/users/teams/{userId}": {
      "get": {
        "tags": [
          "UserManagement"
        ],
        "summary": "Gets the teams of the specified user",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamRaw"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamRaw"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamRaw"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/teams/enable/{teamId}": {
      "put": {
        "tags": [
          "UserManagement"
        ],
        "summary": "Enables the specified team",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "ID of the team to enable",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/teams/disable/{teamId}": {
      "put": {
        "tags": [
          "UserManagement"
        ],
        "summary": "Disables the specified teamm",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "ID of the team to disable",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/users/teamlink/{userId}/{teamId}": {
      "post": {
        "tags": [
          "UserManagement"
        ],
        "summary": "Links the specified user and team",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User to link",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "description": "Team to link",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "UserManagement"
        ],
        "summary": "Unlinks the specified user and team",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User to unlink",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "description": "Team to unlink",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/roles": {
      "get": {
        "tags": [
          "UserManagement"
        ],
        "summary": "Gets all roles",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRaw"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRaw"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRaw"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "UserManagement"
        ],
        "summary": "Adds a new role to the database",
        "requestBody": {
          "description": "New role information",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RoleRaw"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleRaw"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleRaw"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RoleRaw"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RoleRaw"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleRaw"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleRaw"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "UserManagement"
        ],
        "summary": "Updates a role in the database",
        "requestBody": {
          "description": "Role to update",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RoleRaw"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleRaw"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleRaw"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RoleRaw"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RoleRaw"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleRaw"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleRaw"
                }
              }
            }
          }
        }
      }
    },
    "/api/roles/{roleId}": {
      "get": {
        "tags": [
          "UserManagement"
        ],
        "summary": "Gets the role with the specified ID",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "Role to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RoleRaw"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleRaw"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleRaw"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "UserManagement"
        ],
        "summary": "Removes a role from the database",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "ID of the role to remove",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/users/roles/{roleId}": {
      "get": {
        "tags": [
          "UserManagement"
        ],
        "summary": "Gets the users in the specified role",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "ID of the role",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserRaw"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserRaw"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserRaw"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/teams/roles/{roleId}": {
      "get": {
        "tags": [
          "UserManagement"
        ],
        "summary": "Gets the teams in the specified role",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "ID of the role",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamRaw"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamRaw"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamRaw"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/roles/users/{userId}": {
      "get": {
        "tags": [
          "UserManagement"
        ],
        "summary": "Gets the direct roles of the specified user",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRaw"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRaw"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRaw"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/roles/teams/{teamId}": {
      "get": {
        "tags": [
          "UserManagement"
        ],
        "summary": "Gets the direct roles of the specified team",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "ID of the team",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRaw"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRaw"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRaw"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/roles/teamlink/{roleId}/{teamId}": {
      "post": {
        "tags": [
          "UserManagement"
        ],
        "summary": "Links the specified team and role",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "Role to link",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "description": "Team to link",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "UserManagement"
        ],
        "summary": "Unlinks the specified team and role",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "Role to link",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "description": "Team to link",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/roles/userlink/{roleId}/{userId}": {
      "post": {
        "tags": [
          "UserManagement"
        ],
        "summary": "Links the specified user and role",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "Role to link",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User to link",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "UserManagement"
        ],
        "summary": "Unlinks the specified user and role",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "Role to unlink",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User to unlink",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/permissions": {
      "get": {
        "tags": [
          "UserManagement"
        ],
        "summary": "Get all permissions",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PermissionRaw"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PermissionRaw"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PermissionRaw"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "UserManagement"
        ],
        "summary": "Adds a new permission to the database",
        "requestBody": {
          "description": "New permission information",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionRaw"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionRaw"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionRaw"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionRaw"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionRaw"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionRaw"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionRaw"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "UserManagement"
        ],
        "summary": "Updates a permission in the database",
        "requestBody": {
          "description": "Permission to update",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionRaw"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionRaw"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionRaw"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionRaw"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionRaw"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionRaw"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionRaw"
                }
              }
            }
          }
        }
      }
    },
    "/api/permissions/{permissionId}": {
      "get": {
        "tags": [
          "UserManagement"
        ],
        "summary": "Gets the specified permission",
        "parameters": [
          {
            "name": "permissionId",
            "in": "path",
            "description": "ID of permission",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionRaw"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionRaw"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionRaw"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "UserManagement"
        ],
        "summary": "Removes a permission from the database",
        "parameters": [
          {
            "name": "permissionId",
            "in": "path",
            "description": "ID of permission to remove",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/roles/permissionlink/{roleId}/{permissionId}/{revoke}": {
      "post": {
        "tags": [
          "UserManagement"
        ],
        "summary": "Links the specified permission and role",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "Role to link",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permissionId",
            "in": "path",
            "description": "Permission to link",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "revoke",
            "in": "path",
            "description": "Is the permission revoked?",
            "required": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/roles/permissionlink/{roleId}/{permissionId}": {
      "delete": {
        "tags": [
          "UserManagement"
        ],
        "summary": "Unlinks the specified permission and role",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "Role to unlink",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permissionId",
            "in": "path",
            "description": "Permission to unlink",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/userpreferences/{userId}": {
      "get": {
        "tags": [
          "UserPreferences"
        ],
        "summary": "Gets the preferences of the specified user",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserPreferences"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPreferences"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPreferences"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "UserPreferences"
        ],
        "summary": "Removes all existing preferences of the user",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/userpreferences": {
      "post": {
        "tags": [
          "UserPreferences"
        ],
        "summary": "Saves the specified user preferences.",
        "description": "Merges the passed preferences with the existing ones",
        "requestBody": {
          "description": "Preferences to save",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserPreferences"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPreferences"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPreferences"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserPreferences"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserPreferences"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPreferences"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPreferences"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccessTokenHolder": {
        "type": "object",
        "properties": {
          "expiresAt": {
            "type": "string",
            "format": "date-time"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "accessToken": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AppSettingRaw": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a user preference item"
      },
      "AssociationManifest": {
        "type": "object",
        "properties": {
          "displayName": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "description": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "uid": {
            "type": "string",
            "description": "The unique identifier of a manifest object",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The type of association",
            "nullable": true
          },
          "leftEntity": {
            "type": "string",
            "description": "The entity name on the left side of the association",
            "nullable": true
          },
          "rightEntity": {
            "type": "string",
            "description": "The entity name on the right side of the association",
            "nullable": true
          },
          "aggregation": {
            "type": "boolean",
            "description": "Indicates that removing the association should remove the entity\r\ninstances at the right",
            "nullable": true
          },
          "reverseId": {
            "type": "string",
            "description": "The identifier of the reverse direction",
            "nullable": true
          },
          "reverseDisplayName": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "reverseAggregation": {
            "type": "boolean",
            "description": "Indicates that removing the association should remove the entity\r\ninstances at the left",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Describes the manifest of an association defined by a module"
      },
      "AssociationMetadata": {
        "type": "object",
        "properties": {
          "displayName": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "description": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "uid": {
            "type": "string",
            "description": "The unique identifier of a manifest object",
            "nullable": true
          },
          "progId": {
            "type": "string",
            "description": "The unique identifier of a metadata object",
            "nullable": true
          },
          "declaringModule": {
            "type": "string",
            "description": "The identifier of the module declaring the metadata",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/AssociationType"
          },
          "leftEntity": {
            "$ref": "#/components/schemas/EntityMetadata"
          },
          "rightEntity": {
            "$ref": "#/components/schemas/EntityMetadata"
          },
          "aggregation": {
            "type": "boolean",
            "description": "Indicates that removing the association should remove the entity\r\ninstances at the right"
          },
          "reverseId": {
            "type": "string",
            "description": "The identifier of the reverse direction",
            "nullable": true
          },
          "reverseProgId": {
            "type": "string",
            "description": "The programmatic identifier of the reverse direction",
            "nullable": true
          },
          "reverseDisplayName": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "reverseAggregation": {
            "type": "boolean",
            "description": "Indicates that removing the association should remove the entity\r\ninstances at the left"
          },
          "associationId": {
            "type": "integer",
            "description": "The identifier we use as a discriminator of the association",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Represents the metadata information of an association"
      },
      "AssociationMetadataLight": {
        "type": "object",
        "properties": {
          "displayName": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "description": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "uid": {
            "type": "string",
            "description": "The unique identifier of a manifest object",
            "nullable": true
          },
          "progId": {
            "type": "string",
            "description": "The unique identifier of a metadata object",
            "nullable": true
          },
          "declaringModule": {
            "type": "string",
            "description": "The identifier of the module declaring the metadata",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The type of association",
            "nullable": true
          },
          "leftEntity": {
            "type": "string",
            "description": "The entity name on the left side of the association",
            "nullable": true
          },
          "rightEntity": {
            "type": "string",
            "description": "The entity name on the right side of the association",
            "nullable": true
          },
          "aggregation": {
            "type": "boolean",
            "description": "Indicates that removing the association should remove the entity\r\ninstances at the right"
          },
          "reverseDisplayName": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "reverseAggregation": {
            "type": "boolean",
            "description": "Indicates that removing the association should remove the entity\r\ninstances at the left"
          },
          "associationId": {
            "type": "integer",
            "description": "The identifier we use as a discriminator of the association",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AssociationType": {
        "enum": [
          0,
          1,
          2,
          -1
        ],
        "type": "integer",
        "description": "The available types of associations",
        "format": "int32"
      },
      "AuthenticationData": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "User account used for authorization"
      },
      "CompoundFieldTypeManifest": {
        "type": "object",
        "properties": {
          "displayName": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "description": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "uid": {
            "type": "string",
            "description": "The unique identifier of a manifest object",
            "nullable": true
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldManifestBase"
            },
            "description": "The fields of the entity",
            "nullable": true
          },
          "viewOptions": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "View options for compound field types",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Describes the manifest of a compound field definition"
      },
      "CompoundFieldTypeMetadata": {
        "type": "object",
        "properties": {
          "displayName": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "description": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "uid": {
            "type": "string",
            "description": "The unique identifier of a manifest object",
            "nullable": true
          },
          "progId": {
            "type": "string",
            "description": "The unique identifier of a metadata object",
            "nullable": true
          },
          "declaringModule": {
            "type": "string",
            "description": "The identifier of the module declaring the metadata",
            "nullable": true
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldMetadataBase"
            },
            "description": "The fields of the entity",
            "nullable": true
          },
          "viewOptions": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "View options for compound field types",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the metadata of a compound field definition"
      },
      "ContentResult": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "nullable": true
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomFieldMetadata": {
        "type": "object",
        "properties": {
          "entity": {
            "$ref": "#/components/schemas/EntityMetadata"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldMetadataBase"
            },
            "description": "Additional custom fields",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Respresent custom fields defined in a module"
      },
      "DataConnection": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "description": "The unique ID of the connection",
            "nullable": true
          },
          "provider": {
            "type": "string",
            "description": "The type of database provider.",
            "nullable": true
          },
          "connectionString": {
            "type": "string",
            "description": "Connection strings to a particular database",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a connection to an external database"
      },
      "DataOperation": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "description": "The unique ID of the operation",
            "nullable": true
          },
          "connection": {
            "type": "string",
            "description": "The ID of the data connection to use",
            "nullable": true
          },
          "resultType": {
            "type": "string",
            "description": "The type of the result",
            "nullable": true
          },
          "command": {
            "type": "string",
            "description": "The SQL command template to execute",
            "nullable": true
          },
          "resultSet": {
            "type": "string",
            "description": "The data set that defines the format of the result",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Describes a particular data operation"
      },
      "DataSetManifest": {
        "type": "object",
        "properties": {
          "displayName": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "description": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "uid": {
            "type": "string",
            "description": "The unique identifier of a manifest object",
            "nullable": true
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldManifestBase"
            },
            "description": "The fields of the data set",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the manifest of a data set"
      },
      "DataSetMetadata": {
        "type": "object",
        "properties": {
          "displayName": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "description": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "uid": {
            "type": "string",
            "description": "The unique identifier of a manifest object",
            "nullable": true
          },
          "progId": {
            "type": "string",
            "description": "The unique identifier of a metadata object",
            "nullable": true
          },
          "declaringModule": {
            "type": "string",
            "description": "The identifier of the module declaring the metadata",
            "nullable": true
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldMetadataBase"
            },
            "description": "The fields of the data set",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the metadata of a data set"
      },
      "EntityManifest": {
        "type": "object",
        "properties": {
          "displayName": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "description": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "uid": {
            "type": "string",
            "description": "The unique identifier of a manifest object",
            "nullable": true
          },
          "displayField": {
            "type": "string",
            "description": "The name of field to be used as the display field",
            "nullable": true
          },
          "viewOptions": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "View options for entity-like objects",
            "nullable": true
          },
          "order": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortSpecification"
            },
            "description": "Default order specification for entity queries query",
            "nullable": true
          },
          "textFilters": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The name of the fields used for filtering text",
            "nullable": true
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldManifestBase"
            },
            "description": "The fields of the entity",
            "nullable": true
          },
          "validators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityValidatorDefinition"
            },
            "description": "DSL validators used to check the integrity of an entity instance",
            "nullable": true
          },
          "uniqueConstraints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniquenessDefinition"
            },
            "description": "Uniqueness constraints of the entity",
            "nullable": true
          },
          "stereotype": {
            "type": "string",
            "description": "The optional stereotype of an entity. Accepted values are:\r\n\"read-only\", \"append-only\", and \"no-update\"",
            "nullable": true
          },
          "trackingMode": {
            "type": "string",
            "description": "The optional tracking mode of an entity. Accepted values are:\r\n\"no-tracking\", and \"no-audit\"",
            "nullable": true
          },
          "assignableToUser": {
            "type": "boolean",
            "description": "Indicates that an instance of this entity is assignable to a user",
            "nullable": true
          },
          "interceptors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InterceptorDefinition"
            },
            "description": "Entity operation interceptors",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Describes the manifest of an entity"
      },
      "EntityMetadata": {
        "type": "object",
        "properties": {
          "displayName": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "description": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "uid": {
            "type": "string",
            "description": "The unique identifier of a manifest object",
            "nullable": true
          },
          "progId": {
            "type": "string",
            "description": "The unique identifier of a metadata object",
            "nullable": true
          },
          "declaringModule": {
            "type": "string",
            "description": "The identifier of the module declaring the metadata",
            "nullable": true
          },
          "displayField": {
            "$ref": "#/components/schemas/FieldMetadataBase"
          },
          "viewOptions": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "View options for entity-like objects",
            "nullable": true
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldMetadataBase"
            },
            "description": "The fields of the entity",
            "nullable": true
          },
          "order": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortSpecification"
            },
            "description": "Default order specification for entity queries query",
            "nullable": true
          },
          "textFilters": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The name of the fields used for filtering text",
            "nullable": true
          },
          "validators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityValidatorDefinition"
            },
            "description": "DSL validators used to check the integrity of an entity instance",
            "nullable": true
          },
          "uniqueConstraints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniquenessMetadata"
            },
            "description": "Uniqueness constraints of the entity",
            "nullable": true
          },
          "stereotype": {
            "type": "string",
            "description": "The optional stereotype of an entity. Accepted values are:\r\n\"read-only\", \"append-only\", and \"no-update\"",
            "nullable": true
          },
          "trackingMode": {
            "type": "string",
            "description": "The optional tracking mode of an entity. Accepted values are:\r\n\"no-tracking\", and \"no-audit\"",
            "nullable": true
          },
          "assignableToUser": {
            "type": "boolean",
            "description": "Indicates that an instance of this entity is assignable to a user"
          },
          "interceptors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InterceptorDefinition"
            },
            "description": "Entity operation interceptors",
            "nullable": true
          },
          "allowDelete": {
            "type": "boolean",
            "description": "Indicates if delete fields should be used in the entity-like data",
            "readOnly": true
          },
          "allowInsert": {
            "type": "boolean",
            "description": "Insert is allowed?",
            "readOnly": true
          },
          "allowUpdate": {
            "type": "boolean",
            "description": "Update is allowed?",
            "readOnly": true
          },
          "shouldTrackChanges": {
            "type": "boolean",
            "description": "Indicates if the entity changes should be tracked",
            "readOnly": true
          },
          "shouldTrackUser": {
            "type": "boolean",
            "description": "Indicates if users triggering changes should be tracked",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the metadata information of an entity"
      },
      "EntityMetadataLight": {
        "type": "object",
        "properties": {
          "displayName": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "description": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "uid": {
            "type": "string",
            "description": "The unique identifier of a manifest object",
            "nullable": true
          },
          "progId": {
            "type": "string",
            "description": "The unique identifier of a metadata object",
            "nullable": true
          },
          "declaringModule": {
            "type": "string",
            "description": "The identifier of the module declaring the metadata",
            "nullable": true
          },
          "displayField": {
            "type": "string",
            "description": "The name of field to be used as the display field",
            "nullable": true
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldMetadataBase"
            },
            "description": "The fields of the entity",
            "nullable": true
          },
          "validators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityValidatorDefinition"
            },
            "description": "DSL validators used to check the integrity of an entity instance",
            "nullable": true
          },
          "uniqueConstraints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniquenessMetadataLight"
            },
            "description": "Uniqueness constraints of the entity",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents lightweight metadata information of an entity"
      },
      "EntityValidatorDefinition": {
        "type": "object",
        "properties": {
          "declaringModule": {
            "type": "string",
            "description": "The identifier of the module declaring the validator",
            "nullable": true
          },
          "formula": {
            "type": "string",
            "description": "Validation formula",
            "nullable": true
          },
          "targetField": {
            "type": "string",
            "description": "Optional target field to associate with the validation error",
            "nullable": true
          },
          "errorMessage": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "strictValidation": {
            "type": "boolean",
            "description": "When turned on, entity validation errors prevent saving the entity",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents an entity validator"
      },
      "FieldDescriptor": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "description": "Field UID (name)",
            "nullable": true
          },
          "displayName": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "viewOptions": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "View options for custom fields",
            "nullable": true
          },
          "description": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "formula": {
            "type": "string",
            "description": "Formula of the calculated field;",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Describes a calculated field within a projection manifest"
      },
      "FieldManifestBase": {
        "type": "object",
        "properties": {
          "displayName": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "description": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "uid": {
            "type": "string",
            "description": "The unique identifier of a manifest object",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The type of the field",
            "nullable": true,
            "readOnly": true
          },
          "required": {
            "type": "boolean",
            "description": "Indicates if the field value is required",
            "nullable": true
          },
          "unique": {
            "type": "boolean",
            "description": "Indicates if the field value must be unique",
            "nullable": true
          },
          "disableUpdate": {
            "type": "boolean",
            "description": "Indicates that updating this field is disabled",
            "nullable": true
          },
          "defaultValue": {
            "type": "string",
            "description": "Default field value in string form",
            "nullable": true
          },
          "validators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidatorDefinition"
            },
            "description": "Field validators",
            "nullable": true
          },
          "strictValidation": {
            "type": "boolean",
            "description": "When turned on, entity validation errors prevent saving the entity",
            "nullable": true
          },
          "viewOptions": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "View options for fields",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Describes the manifest of a custom field of an entity"
      },
      "FieldMetadataBase": {
        "type": "object",
        "properties": {
          "displayName": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "description": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "uid": {
            "type": "string",
            "description": "The unique identifier of a manifest object",
            "nullable": true
          },
          "progId": {
            "type": "string",
            "description": "The unique identifier of a metadata object",
            "nullable": true
          },
          "declaringModule": {
            "type": "string",
            "description": "The identifier of the module declaring the metadata",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The type of the field",
            "nullable": true,
            "readOnly": true
          },
          "required": {
            "type": "boolean",
            "description": "Indicates if the field value is required"
          },
          "unique": {
            "type": "boolean",
            "description": "Indicates if the field value must be unique"
          },
          "disableUpdate": {
            "type": "boolean",
            "description": "Indicates that updating this field is disabled"
          },
          "defaultValue": {
            "description": "Default field value in string form",
            "nullable": true
          },
          "validators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidatorDefinition"
            },
            "description": "Field validators",
            "nullable": true
          },
          "strictValidation": {
            "type": "boolean",
            "description": "When turned on, entity validation errors prevent saving the entity"
          },
          "viewOptions": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "View options for fields",
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "description": "The full name of the field",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the metadata information of a field"
      },
      "FieldTypeDescriptor": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type discriminator",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the field type",
            "nullable": true
          },
          "description": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "allowRequired": {
            "type": "boolean",
            "description": "Allows setting the Required attribute?"
          },
          "storageType": {
            "type": "string",
            "description": "Storage type of the field",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Defines a descriptor for an entity field type."
      },
      "InterceptorDefinition": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of interceptor",
            "nullable": true
          },
          "operation": {
            "type": "string",
            "description": "Intercepted operation type",
            "nullable": true
          },
          "params": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Optional interceptor parameters",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Defines an interception point for an entity or association"
      },
      "JToken": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/JToken"
        }
      },
      "ModuleManifest": {
        "type": "object",
        "properties": {
          "displayName": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "description": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "uid": {
            "type": "string",
            "description": "The unique identifier of a manifest object",
            "nullable": true
          },
          "version": {
            "type": "string",
            "description": "Version number (semantic versioning)",
            "nullable": true
          },
          "dependsOn": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The Uids of module this module depends on",
            "nullable": true
          },
          "entities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityManifest"
            },
            "description": "The manifest of entities this module defines",
            "nullable": true
          },
          "projections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectionManifest"
            },
            "description": "The manifest of projections this module defines",
            "nullable": true
          },
          "compoundFieldTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompoundFieldTypeManifest"
            },
            "description": "The manifest of compound field types this module defines",
            "nullable": true
          },
          "customFields": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FieldManifestBase"
              },
              "nullable": true
            },
            "description": "The manifest of custom fields this module defines",
            "nullable": true
          },
          "entityValidators": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EntityValidatorDefinition"
              },
              "nullable": true
            },
            "description": "The manifest of entity validators.",
            "nullable": true
          },
          "associations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssociationManifest"
            },
            "description": "The associations this module defines",
            "nullable": true
          },
          "apps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UiNode"
            },
            "description": "The manifest of app definitions this module provides",
            "nullable": true
          },
          "dataConnections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataConnection"
            },
            "description": "The manifest of data connections to external databases",
            "nullable": true
          },
          "dataOperations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataOperation"
            },
            "description": "The manifest of data operations",
            "nullable": true
          },
          "dataSets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataSetManifest"
            },
            "description": "The manifest of data sets defined in the module",
            "nullable": true
          },
          "scriptLanguage": {
            "type": "string",
            "description": "The scripting language used with this module",
            "nullable": true
          },
          "libs": {
            "type": "string",
            "description": "The libraries/external dependencies to use with scripting",
            "nullable": true
          },
          "scriptInit": {
            "type": "string",
            "description": "Optional initialization script to use with module scripting",
            "nullable": true
          },
          "moduleUpdates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VersionUpdateInfo"
            },
            "description": "Update instructions to update this module from an old versions to the new one",
            "nullable": true
          },
          "translations": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "nullable": true
            },
            "description": "Translations to provide translations for already registered modules",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This class describes the module manifest"
      },
      "ModuleMetadata": {
        "type": "object",
        "properties": {
          "displayName": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "description": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "uid": {
            "type": "string",
            "description": "The unique identifier of a manifest object",
            "nullable": true
          },
          "progId": {
            "type": "string",
            "description": "The unique identifier of a metadata object",
            "nullable": true
          },
          "declaringModule": {
            "type": "string",
            "description": "The identifier of the module declaring the metadata",
            "nullable": true
          },
          "version": {
            "type": "string",
            "description": "Version number (semantic versioning)",
            "nullable": true
          },
          "dependsOn": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModuleMetadata"
            },
            "description": "The other modules this module depends on",
            "nullable": true
          },
          "entities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityMetadata"
            },
            "description": "The entities this module defines",
            "nullable": true
          },
          "customFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldMetadata"
            },
            "description": "The custom fields this module defines",
            "nullable": true
          },
          "projections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectionMetadata"
            },
            "description": "The projection this module defines",
            "nullable": true
          },
          "compoundFieldTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompoundFieldTypeMetadata"
            },
            "description": "The manifest of compound field types this module defines",
            "nullable": true
          },
          "associations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssociationMetadata"
            },
            "description": "The associations the module defines",
            "nullable": true
          },
          "apps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UiNode"
            },
            "description": "The manifest of app definitions this module provides",
            "nullable": true
          },
          "dataConnections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataConnection"
            },
            "description": "The metadata of data connections to external databases",
            "nullable": true
          },
          "dataOperations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataOperation"
            },
            "description": "The manifest of data operations",
            "nullable": true
          },
          "dataSets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataSetMetadata"
            },
            "description": "The metadata of data sets defined in the module",
            "nullable": true
          },
          "scriptLanguage": {
            "type": "string",
            "description": "The scripting language used with this module",
            "nullable": true
          },
          "libs": {
            "type": "string",
            "description": "The libraries/external dependencies to use with scripting",
            "nullable": true
          },
          "scriptInit": {
            "type": "string",
            "description": "Optional initialization script to use with module scripting",
            "nullable": true
          },
          "translations": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "nullable": true
            },
            "description": "Translations to provide translations for already registered modules",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the metadata of a module"
      },
      "ModuleRaw": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "version": {
            "type": "string",
            "nullable": true
          },
          "file": {
            "type": "string",
            "nullable": true
          },
          "manifest": {
            "type": "string",
            "nullable": true
          },
          "locked": {
            "type": "boolean",
            "nullable": true
          },
          "registered": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a metadata record"
      },
      "MultiLanguageText": {
        "type": "object",
        "properties": {
          "default": {
            "type": "string",
            "description": "Default text",
            "nullable": true
          },
          "localized": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "Localized text",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This class represents a multi-language text"
      },
      "PermissionRaw": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A permission record"
      },
      "PermissionRoute": {
        "type": "object",
        "properties": {
          "permissionId": {
            "type": "string",
            "nullable": true
          },
          "revoke": {
            "type": "boolean"
          },
          "roleId": {
            "type": "string",
            "nullable": true
          },
          "groupId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a route between a permission and a user"
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "ProjectionManifest": {
        "type": "object",
        "properties": {
          "displayName": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "description": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "uid": {
            "type": "string",
            "description": "The unique identifier of a manifest object",
            "nullable": true
          },
          "displayField": {
            "type": "string",
            "description": "The name of field to be used as the display field",
            "nullable": true
          },
          "viewOptions": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "View options for entity-like objects",
            "nullable": true
          },
          "order": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortSpecification"
            },
            "description": "Default order specification for entity queries query",
            "nullable": true
          },
          "textFilters": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The name of the fields used for filtering text",
            "nullable": true
          },
          "projectedEntity": {
            "type": "string",
            "description": "The entity this projection as based on",
            "nullable": true
          },
          "fields": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The fields to use from the base entity",
            "nullable": true
          },
          "calculatedFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldDescriptor"
            },
            "description": "Additional calculated fields",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Describes the manifest of a projection"
      },
      "ProjectionMetadata": {
        "type": "object",
        "properties": {
          "displayName": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "description": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "uid": {
            "type": "string",
            "description": "The unique identifier of a manifest object",
            "nullable": true
          },
          "progId": {
            "type": "string",
            "description": "The unique identifier of a metadata object",
            "nullable": true
          },
          "declaringModule": {
            "type": "string",
            "description": "The identifier of the module declaring the metadata",
            "nullable": true
          },
          "displayField": {
            "$ref": "#/components/schemas/FieldMetadataBase"
          },
          "viewOptions": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "View options for entity-like objects",
            "nullable": true
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldMetadataBase"
            },
            "description": "The fields of the entity",
            "nullable": true
          },
          "order": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortSpecification"
            },
            "description": "Default order specification for entity queries query",
            "nullable": true
          },
          "textFilters": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The name of the fields used for filtering text",
            "nullable": true
          },
          "projectedEntity": {
            "$ref": "#/components/schemas/EntityMetadata"
          },
          "allowDelete": {
            "type": "boolean",
            "description": "Indicates if delete fields should be used in the entity-like data",
            "readOnly": true
          },
          "allowInsert": {
            "type": "boolean",
            "description": "Insert is allowed?",
            "readOnly": true
          },
          "allowUpdate": {
            "type": "boolean",
            "description": "Update is allowed?",
            "readOnly": true
          },
          "shouldTrackChanges": {
            "type": "boolean",
            "description": "Indicates if the entity changes should be tracked",
            "readOnly": true
          },
          "shouldTrackUser": {
            "type": "boolean",
            "description": "Indicates if users triggering changes should be tracked",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the metadata information of a projection"
      },
      "ProjectionMetadataLight": {
        "type": "object",
        "properties": {
          "displayName": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "description": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "uid": {
            "type": "string",
            "description": "The unique identifier of a manifest object",
            "nullable": true
          },
          "progId": {
            "type": "string",
            "description": "The unique identifier of a metadata object",
            "nullable": true
          },
          "declaringModule": {
            "type": "string",
            "description": "The identifier of the module declaring the metadata",
            "nullable": true
          },
          "displayField": {
            "type": "string",
            "description": "The name of field to be used as the display field",
            "nullable": true
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldMetadataBase"
            },
            "description": "The fields of the entity",
            "nullable": true
          },
          "projectedEntity": {
            "type": "string",
            "description": "The entity this projection is based on",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents lightweight metadata information of a projection"
      },
      "RoleRaw": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A group record"
      },
      "SortSpecification": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "description": "Field name",
            "nullable": true
          },
          "descending": {
            "type": "boolean",
            "description": "Use descending order?",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Specifies an ORDER BY clause"
      },
      "TeamCore": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request object for adding a new group"
      },
      "TeamCoreUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Request object for updating a group"
      },
      "TeamRaw": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "disabled": {
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "description": "A group record"
      },
      "TinkerNode": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The discriminator of the UI node",
            "nullable": true
          },
          "uid": {
            "type": "string",
            "description": "The unique identifier of the node; code can use this ID to access the node",
            "nullable": true
          },
          "props": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "UI node properties",
            "nullable": true
          },
          "when": {
            "type": "string",
            "description": "Binding expression indicating if the component should be rendered",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a node that describes a generic UI Node entry"
      },
      "UiNode": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The discriminator of the UI node",
            "nullable": true
          },
          "uid": {
            "type": "string",
            "description": "The unique identifier of the node; code can use this ID to access the node",
            "nullable": true
          },
          "loaders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TinkerNode"
            },
            "description": "Optionale loaders",
            "nullable": true
          },
          "commands": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TinkerNode"
            },
            "description": "Optional commands",
            "nullable": true
          },
          "transforms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TinkerNode"
            },
            "description": "Optional transforms",
            "nullable": true
          },
          "props": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "UI node properties",
            "nullable": true
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UiNode"
            },
            "description": "Optional child nodes",
            "nullable": true
          },
          "when": {
            "type": "string",
            "description": "Binding expression indicating if the component should be rendered",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a node that describes a generic UI Node entry"
      },
      "UniquenessDefinition": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the uniqueness definition",
            "nullable": true
          },
          "fields": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The names of the fields included in this constraint",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Describes a uniqueness constraint"
      },
      "UniquenessMetadata": {
        "type": "object",
        "properties": {
          "displayName": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "description": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "name": {
            "type": "string",
            "description": "Name of the uniqueness definition",
            "nullable": true
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldMetadataBase"
            },
            "description": "The names of the fields included in this constraint",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the metadata information of a uniqueness constraint"
      },
      "UniquenessMetadataLight": {
        "type": "object",
        "properties": {
          "displayName": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "description": {
            "$ref": "#/components/schemas/MultiLanguageText"
          },
          "name": {
            "type": "string",
            "description": "Name of the uniqueness definition",
            "nullable": true
          },
          "fields": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The names of the fields included in this constraint",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents lightweight metadata information of a uniqueness constraint"
      },
      "UserCore": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request object for adding a new user"
      },
      "UserCoreUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Request object for updating a user"
      },
      "UserDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserPreferences": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "description": "ID of the user",
            "format": "int32"
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "Preference key-value pairs",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Respresents the sets of user preference"
      },
      "UserRaw": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "picture": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "disabled": {
            "type": "boolean"
          },
          "archived": {
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "description": "A user record"
      },
      "ValidatorDefinition": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the validator",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Describes a validator"
      },
      "VersionUpdateInfo": {
        "type": "object",
        "properties": {
          "targetVersion": {
            "type": "string",
            "description": "The target version that requires this particular update script",
            "nullable": true
          },
          "tool": {
            "type": "string",
            "description": "The tool to used for running the script",
            "nullable": true
          },
          "script": {
            "description": "The script to run with the tool",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Describes a version update item"
      }
    }
  },
  "tags": [
    {
      "name": "EntityPersistence",
      "description": "### Example description of this controller (or endpoint, from the api consumer's perspective)\r\n\r\nLorem ipsum dolor sit amet consectetur, adipisicing elit. Nesciunt laborum soluta, labore doloribus minima quam cupiditate unde officia odio ipsam porro eveniet nam numquam eius iste sunt beatae ab maiores ullam eos. Consectetur corporis error, quia corrupti cupiditate nulla, reprehenderit et voluptates dolor rem autem accusamus sint necessitatibus suscipit natus dolore molestiae dolores nisi minus quis eligendi. Iste reprehenderit, libero eius repellendus deleniti qui, laborum mollitia commodi accusantium aliquid officiis, perferendis explicabo ullam inventore id quia maiores aspernatur voluptatibus. SimiliqueL?"
    }
  ]
}